# src/la_pkg/write/scaffold.py
from __future__ import annotations

import shutil
from pathlib import Path

QMD_TEMPLATE = """---
title: "{title}"
author: [{authors}]
format:
  html:
    toc: true
  pdf:
    toc: true
bibliography: references.bib
csl: style.csl
filters: []
---

# Abstract
<!-- Autogenerated from QA abstracts if available -->

# Introduction
<!-- Stable, templated text w/ brief context -->

# Methods
- **Search sources**: OpenAlex, arXiv, PubMed (+ Unpaywall/PMC PDF)
- **Dedup rules**: DOI + 90% title similarity
- **Screening**: model, threshold, recall target
- **Parsing**: GROBID vX.Y, success rate
- **RAG**: chunking (max_tokens/overlap), index (provider/model)
- Add table: `methods_summary`

# Results
<!-- Insert "claim table" with citations and page spans -->
`r` include claims_table

# Discussion
# Limitations
# Conclusion

# References
"""

QUARTO_YML_TEMPLATE = """project:
  type: default
  output-dir: .

format:
  html:
    theme: cosmo
    toc: true
    mainfont: "sans-serif"
  pdf:
    documentclass: scrreprt
    papersize: a4
    mainfont: "sans-serif"
"""


def create_report_scaffold(
    out_dir: Path,
    title: str,
    authors: list[str],
    style_path: Path,
) -> None:
    """
    Creates the basic directory structure and template files for a new report.
    """
    if not style_path.exists():
        raise FileNotFoundError(f"CSL style file not found at: {style_path}")

    out_dir.mkdir(parents=True, exist_ok=True)

    # Format authors for YAML list
    formatted_authors = ", ".join([f'"{author.strip()}"' for author in authors])

    # Create report.qmd
    qmd_content = QMD_TEMPLATE.format(title=title, authors=formatted_authors)
    (out_dir / "report.qmd").write_text(qmd_content, encoding="utf-8")

    # Create empty references.bib
    (out_dir / "references.bib").touch()

    # Create _quarto.yml
    (out_dir / "_quarto.yml").write_text(QUARTO_YML_TEMPLATE, encoding="utf-8")

    # Copy CSL style file
    shutil.copy(style_path, out_dir / "style.csl")
