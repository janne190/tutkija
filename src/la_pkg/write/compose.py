# src/la_pkg/write/compose.py
from __future__ import annotations

from pathlib import Path
import pandas as pd

from .tables import create_claims_table, create_methods_summary_table


def fill_qmd_template(
    qmd_path: Path,
    qa_path: Path,
    logs_dir: Path,
    parsed_index_path: Path,
    out_path: Path,
) -> None:
    """
    Fills the QMD template with content from QA files and logs.
    """
    if not qmd_path.exists():
        raise FileNotFoundError(f"QMD template not found: {qmd_path}")

    content = qmd_path.read_text(encoding="utf-8")

    # Generate tables
    claims_table = create_claims_table(qa_path, parsed_index_path)
    methods_table = create_methods_summary_table(logs_dir)

    # Replace placeholders
    # A more robust solution would use a proper templating engine,
    # but for this simple case, string replacement is sufficient.
    content = content.replace("`r` include claims_table", claims_table)
    content = content.replace("`methods_summary`", methods_table)

    # Extract abstract from QA if available
    if qa_path.exists():
        qa_df = pd.read_json(qa_path, lines=True)
        if not qa_df.empty and "answer" in qa_df.columns:
            # Assuming the first answer can serve as an abstract
            abstract = qa_df["answer"].iloc[0]
            content = content.replace(
                "<!-- Autogenerated from QA abstracts if available -->",
                abstract
            )

    out_path.write_text(content, encoding="utf-8")
