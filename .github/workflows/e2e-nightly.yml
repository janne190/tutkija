name: E2E Nightly
on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install uv
        run: pipx install uv
      - name: Setup venv
        run: |
          uv venv
          . .venv/bin/activate
          uv pip install -e .
          uv pip install ruff mypy pytest
      - name: Smoke, la hello
        run: |
          . .venv/bin/activate
          la hello | head -n 3

      - name: Live search-all smoke
        env:
          TUTKIJA_CONTACT_EMAIL: ci@tutkija.invalid
        run: |
          set -euo pipefail
          . .venv/bin/activate
          la search-all --topic "genomic screening cancer" --limit 40 --out data/cache/nightly-merged.parquet
          python - <<'PY'
import csv
import json
from pathlib import Path

log_path = Path('data/cache/merge_log.csv')
if not log_path.exists():
    raise SystemExit('merge_log.csv puuttuu')
with log_path.open(encoding='utf-8') as handle:
    rows = list(csv.DictReader(handle))
if not rows:
    raise SystemExit('merge_log.csv tyhja')
last = rows[-1]
counts_raw = last.get('per_source_counts')
if not counts_raw:
    raise SystemExit('per_source_counts puuttuu')
counts = json.loads(counts_raw)
required = {'openalex', 'pubmed', 'arxiv'}
missing = sorted(required.difference(counts))
if missing:
    raise SystemExit(f'per_source_counts puuttuu avaimet: {missing}')
def _to_int(value):
    if isinstance(value, (int, float)):
        return int(value)
    if isinstance(value, str) and value.strip():
        try:
            return int(float(value))
        except ValueError:
            return 0
    return 0
if not any(_to_int(counts.get(name, 0)) > 0 for name in required):
    raise SystemExit(f'per_source_counts kaikki arvot 0: {counts}')
out_path = Path(last.get('out_path', ''))
if not out_path.exists():
    raise SystemExit(f'merged parquet puuttuu: {out_path}')
print('per_source_counts', counts)
print('merged_path', out_path.as_posix())
PY
