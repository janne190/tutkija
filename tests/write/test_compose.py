# tests/write/test_compose.py
from __future__ import annotations

from pathlib import Path

import pandas as pd

from la_pkg.write.compose import fill_qmd_template

QMD_TEMPLATE_CONTENT = """---
title: "Test Report"
---

# Abstract
<!-- Autogenerated from QA abstracts if available -->

# Results
`r` include claims_table

# Methods
- `methods_summary`
"""


def test_fill_qmd_template(tmp_path: Path):
    qmd_path = tmp_path / "report.qmd"
    qa_path = tmp_path / "qa.jsonl"
    logs_dir = tmp_path / "logs"
    parsed_index_path = tmp_path / "parsed_index.parquet"
    out_path = tmp_path / "report_filled.qmd"

    logs_dir.mkdir()
    qmd_path.write_text(QMD_TEMPLATE_CONTENT)

    # Create dummy data
    pd.DataFrame({"id": ["paper1"], "doi": ["10.1234/mock1"]}).to_parquet(
        parsed_index_path
    )
    with open(qa_path, "w") as f:
        f.write(
            '{"question": "What is the answer?", "answer": "This is the abstract.", "citations": [{"paper_id": "paper1", "pages": "1-2"}]}\\n'
        )

    fill_qmd_template(qmd_path, qa_path, logs_dir, parsed_index_path, out_path)

    assert out_path.exists()
    content = out_path.read_text()

    assert "This is the abstract." in content
    assert "| Claim | Citations | Confidence |" in content
    assert "| What is the answer? | [@paper1 p. 1-2] | N/A |" in content
    assert "| Stage | Parameter | Value |" in content
